'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'

interface UserData {
  id: string
  email: string
  name: string
  role: string
  grade?: string
  class?: string
  studentNo?: string
  createdAt?: string
  lastLogin?: string
  className?: string
  phone?: string
  parentPhone?: string
  currentLoan?: string
  loanHistory?: number
  overdueCount?: number
  status?: string
  pendingApproval?: boolean
  requestedRole?: string
  isTeacher?: boolean
  allLoans?: any[]
}

interface IntegratedUserManagementProps {
  currentUser: {
    email: string
    role: string
    grade?: string
    class?: string
    isApprovedHomeroom?: boolean
  }
}

export function IntegratedUserManagement({ currentUser }: IntegratedUserManagementProps) {
  const [users, setUsers] = useState<UserData[]>([])
  const [pendingApprovals, setPendingApprovals] = useState<any[]>([])
  const [loading, setLoading] = useState(true)
  const [selectedUser, setSelectedUser] = useState<UserData | null>(null)
  const [showRoleModal, setShowRoleModal] = useState(false)
  const [showUserLogsModal, setShowUserLogsModal] = useState(false)
  const [userLogs, setUserLogs] = useState<any[]>([])
  const [logsLoading, setLogsLoading] = useState(false)
  const [searchTerm, setSearchTerm] = useState('')
  const [roleFilter, setRoleFilter] = useState('all')
  const [activeTab, setActiveTab] = useState('all-users')

  // Î™®Îì† ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ÏôÄ ÏäπÏù∏ ÎåÄÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  useEffect(() => {
    const loadData = async () => {
      try {
        setLoading(true)

        // Î≥ëÎ†¨Î°ú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
        const [usersResponse, loansResponse, pendingResponse] = await Promise.all([
          fetch('/api/users', { cache: 'no-store' }),
          fetch('/api/loans', { cache: 'no-store' }),
          fetch('/api/admin/pending-approvals', { cache: 'no-store' })
        ])

        let allUsers: UserData[] = []

        if (usersResponse.ok) {
          const { users: fetchedUsers } = await usersResponse.json()
          allUsers = fetchedUsers.map((user: any) => ({
            id: user.id,
            email: user.email,
            name: user.name || user.email?.split('@')[0] || '',
            role: user.role || 'student',
            grade: user.grade,
            class: user.class,
            studentNo: user.studentNo,
            createdAt: user.created_at ? new Date(user.created_at).toLocaleDateString('ko-KR') : '',
            lastLogin: user.last_sign_in_at ? new Date(user.last_sign_in_at).toLocaleDateString('ko-KR') : null,
            className: user.grade && user.class ? `${user.grade}-${user.class}` : '',
            phone: '',
            parentPhone: '',
            currentLoan: null,
            loanHistory: 0,
            overdueCount: 0,
            status: 'active',
            allLoans: []
          }))
        }

        // ÎåÄÏó¨ Îç∞Ïù¥ÌÑ∞ Ïó∞Í≤∞
        if (loansResponse.ok) {
          const { loans } = await loansResponse.json()

          // ÏÇ¨Ïö©ÏûêÎ≥Ñ ÎåÄÏó¨ Ï†ïÎ≥¥ ÏßëÍ≥Ñ
          const loansByUser = new Map()
          loans.forEach((loan: any) => {
            const email = loan.email
            if (!loansByUser.has(email)) {
              loansByUser.set(email, {
                history: 0,
                overdue: 0,
                current: null,
                allLoans: []
              })
            }

            const userLoans = loansByUser.get(email)
            userLoans.history++
            userLoans.allLoans.push(loan)

            if (loan.status === 'picked_up') {
              userLoans.current = loan.device_tag || loan.deviceTag

              // Ïó∞Ï≤¥ ÌôïÏù∏
              const isOverdue = loan.due_date || loan.dueDate ?
                new Date() > new Date(loan.due_date || loan.dueDate) : false
              if (isOverdue) {
                userLoans.overdue++
              }
            }
          })

          // ÎåÄÏó¨ Ï†ïÎ≥¥Î•º ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞Ïóê Ïó∞Í≤∞
          allUsers = allUsers.map(user => {
            const userLoans = loansByUser.get(user.email)
            if (userLoans) {
              return {
                ...user,
                currentLoan: userLoans.current,
                loanHistory: userLoans.history,
                overdueCount: userLoans.overdue,
                allLoans: userLoans.allLoans
              }
            }
            return user
          })

          // ÎåÄÏó¨ Í∏∞Î°ùÏù¥ ÏûàÏßÄÎßå users ÌÖåÏù¥Î∏îÏóê ÏóÜÎäî ÏÇ¨Ïö©ÏûêÎì§ Ï∂îÍ∞Ä
          loans.forEach((loan: any) => {
            const email = loan.email
            const existingUser = allUsers.find(u => u.email === email)
            if (!existingUser) {
              const userLoans = loansByUser.get(email)
              allUsers.push({
                id: email,
                email: email,
                name: loan.student_name || loan.studentName || email.split('@')[0],
                role: 'student',
                className: loan.class_name || loan.className || '',
                phone: loan.student_contact || loan.studentContact || '',
                parentPhone: '',
                currentLoan: userLoans?.current || null,
                loanHistory: userLoans?.history || 0,
                overdueCount: userLoans?.overdue || 0,
                status: 'active',
                allLoans: userLoans?.allLoans || []
              })
            }
          })
        }

        // ÏäπÏù∏ ÎåÄÍ∏∞ ÏÇ¨Ïö©Ïûê Ï≤òÎ¶¨
        if (pendingResponse.ok) {
          const { pendingUsers } = await pendingResponse.json()
          setPendingApprovals(pendingUsers || [])

          // ÏäπÏù∏ ÎåÄÍ∏∞ ÏÇ¨Ïö©ÏûêÎ•º ÏÇ¨Ïö©Ïûê Î™©Î°ùÏóê Ï∂îÍ∞Ä/ÏóÖÎç∞Ïù¥Ìä∏
          pendingUsers?.forEach((pendingUser: any) => {
            const existingUserIndex = allUsers.findIndex(u => u.email === pendingUser.email)
            if (existingUserIndex >= 0) {
              // Í∏∞Ï°¥ ÏÇ¨Ïö©ÏûêÏóê ÏäπÏù∏ ÎåÄÍ∏∞ Ï†ïÎ≥¥ Ï∂îÍ∞Ä
              allUsers[existingUserIndex] = {
                ...allUsers[existingUserIndex],
                pendingApproval: true,
                requestedRole: pendingUser.requested_role || 'homeroom'
              }
            } else {
              // ÏÉàÎ°úÏö¥ ÏäπÏù∏ ÎåÄÍ∏∞ ÏÇ¨Ïö©Ïûê Ï∂îÍ∞Ä
              const classInfo = pendingUser.class_info || {}
              allUsers.push({
                id: pendingUser.email,
                email: pendingUser.email,
                name: pendingUser.name,
                role: 'student',
                className: classInfo.grade && classInfo.class ? `${classInfo.grade}-${classInfo.class}` : '',
                phone: '',
                parentPhone: '',
                currentLoan: null,
                loanHistory: 0,
                overdueCount: 0,
                status: 'active',
                allLoans: [],
                pendingApproval: true,
                requestedRole: pendingUser.requested_role || 'homeroom'
              })
            }
          })
        }

        // Îã¥ÏûÑÍµêÏÇ¨Ïù∏ Í≤ΩÏö∞ ÏûêÏã†Ïùò Î∞ò ÌïôÏÉùÎßå ÌïÑÌÑ∞ÎßÅ
        if (currentUser.role === 'homeroom' && currentUser.isApprovedHomeroom && currentUser.grade && currentUser.class) {
          const userGrade = parseInt(currentUser.grade)
          const userClass = parseInt(currentUser.class)

          allUsers = allUsers.filter(user => {
            // Í¥ÄÎ¶¨Ïûê, Í¥ÄÎ¶¨ÌåÄ, Îã§Î•∏ Îã¥ÏûÑÍµêÏÇ¨Îäî ÌëúÏãúÌïòÏßÄ ÏïäÏùå
            if (user.role === 'admin' || user.role === 'manager' || (user.role === 'homeroom' && user.email !== currentUser.email)) {
              return false
            }

            // ÏûêÏã†ÏùÄ Ìè¨Ìï®
            if (user.email === currentUser.email) {
              return true
            }

            // ÌïôÏÉùÏùò ÌïôÍ∏â Ï†ïÎ≥¥ ÌôïÏù∏
            if (user.className) {
              const match = user.className.match(/(\d+)-(\d+)/)
              if (match) {
                const studentGrade = parseInt(match[1])
                const studentClass = parseInt(match[2])
                return studentGrade === userGrade && studentClass === userClass
              }
            }

            return false
          })
        }

        setUsers(allUsers)
      } catch (error) {
        console.error('Failed to load user data:', error)
      } finally {
        setLoading(false)
      }
    }

    loadData()
  }, [currentUser])

  const handleRoleChange = async (userId: string, newRole: string) => {
    try {
      const response = await fetch('/api/users', {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId, role: newRole }),
      })

      if (!response.ok) {
        throw new Error('Failed to update user role')
      }

      // Î°úÏª¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      setUsers(prev => prev.map(user =>
        user.id === userId ? { ...user, role: newRole } : user
      ))

      setShowRoleModal(false)
      setSelectedUser(null)
      alert('Ïó≠Ìï†Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§.')
    } catch (error) {
      console.error('Failed to update user role:', error)
      alert('Ïó≠Ìï† Î≥ÄÍ≤ΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
    }
  }

  const loadUserLogs = async (userId: string) => {
    setLogsLoading(true)
    try {
      console.log('üîç Loading user logs for userId:', userId)
      const response = await fetch(`/api/user-logs?userId=${userId}`)
      console.log('üîç User logs response status:', response.status)
      if (response.ok) {
        const logs = await response.json()
        console.log('üîç User logs loaded:', logs)
        console.log('üîç User logs structure check:', {
          hasLogs: logs.logs ? 'YES' : 'NO',
          logsLength: logs.logs ? logs.logs.length : 0,
          directLogsLength: Array.isArray(logs) ? logs.length : 0,
          logsSample: logs.logs ? logs.logs.slice(0, 2) : 'No logs.logs property'
        })

        // API ÏùëÎãµÏù¥ { logs: [...] } ÌòïÌÉúÏù∏ÏßÄ ÌôïÏù∏ÌïòÍ≥† Ï†ÅÏ†àÌûà Ï≤òÎ¶¨
        if (logs.logs && Array.isArray(logs.logs)) {
          setUserLogs(logs.logs)
        } else if (Array.isArray(logs)) {
          setUserLogs(logs)
        } else {
          console.error('üîç Unexpected logs format:', logs)
          setUserLogs([])
        }
      } else {
        const errorText = await response.text()
        console.error('Failed to load user logs:', response.status, errorText)
        setUserLogs([])
      }
    } catch (error) {
      console.error('Error loading user logs:', error)
      setUserLogs([])
    } finally {
      setLogsLoading(false)
    }
  }

  const handleApprovalAction = async (userId: string, action: 'approve' | 'reject') => {
    try {
      const response = await fetch('/api/admin/pending-approvals', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId, action }),
      })

      if (!response.ok) {
        throw new Error('Failed to process approval')
      }

      // ÏäπÏù∏ Ï≤òÎ¶¨ ÏôÑÎ£å ÌõÑ Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®
      if (action === 'approve') {
        alert('ÏäπÏù∏Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.')
      } else {
        alert('ÏäπÏù∏ ÏöîÏ≤≠Ïù¥ Í±∞Ï†àÎêòÏóàÏäµÎãàÎã§.')
      }

      // ÌéòÏù¥ÏßÄ ÏÉàÎ°úÍ≥†Ïπ®ÏúºÎ°ú ÏµúÏã† Îç∞Ïù¥ÌÑ∞ Î∞òÏòÅ
      window.location.reload()
    } catch (error) {
      console.error('Failed to process approval:', error)
      alert('ÏäπÏù∏ Ï≤òÎ¶¨ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.')
    }
  }

  const getRoleText = (role: string) => {
    const roleMap = {
      'admin': 'Í¥ÄÎ¶¨Ïûê',
      'homeroom': 'Îã¥ÏûÑÍµêÏÇ¨',
      'helper': 'ÎÖ∏Ìä∏Î∂Å Í¥ÄÎ¶¨ ÎèÑÏö∞ÎØ∏',
      'manager': 'Í¥ÄÎ¶¨ÌåÄ',
      'student': 'ÌïôÏÉù'
    }
    return roleMap[role as keyof typeof roleMap] || role
  }

  const getFilteredUsers = () => {
    return users.filter(user => {
      const matchesSearch = !searchTerm ||
        user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
        (user.className && user.className.includes(searchTerm))

      const matchesRole = roleFilter === 'all' || user.role === roleFilter

      // ÌÉ≠Î≥Ñ ÌïÑÌÑ∞ÎßÅ
      if (activeTab === 'pending-approvals') {
        return user.pendingApproval && matchesSearch
      }

      return matchesSearch && matchesRole
    })
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center py-8">
        <div className="text-center">
          <div className="w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-600">ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
        </div>
      </div>
    )
  }

  const filteredUsers = getFilteredUsers()
  const pendingCount = pendingApprovals.length

  return (
    <>
      <Card>
        <CardHeader>
          <CardTitle>ÏÇ¨Ïö©Ïûê Í¥ÄÎ¶¨</CardTitle>
          <CardDescription>
            ÏãúÏä§ÌÖúÏóê Îì±Î°ùÎêú Î™®Îì† ÏÇ¨Ïö©ÏûêÎ•º Í¥ÄÎ¶¨ÌïòÍ≥† ÏäπÏù∏ ÏöîÏ≤≠ÏùÑ Ï≤òÎ¶¨Ìï©ÎãàÎã§.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
            <TabsList>
              <TabsTrigger value="all-users">
                Ï†ÑÏ≤¥ ÏÇ¨Ïö©Ïûê ({users.length})
              </TabsTrigger>
              {(currentUser.role === 'admin' || currentUser.role === 'manager' || currentUser.role === 'homeroom') && (
                <TabsTrigger value="pending-approvals">
                  ÏäπÏù∏ ÎåÄÍ∏∞ {pendingCount > 0 && (
                    <Badge variant="destructive" className="ml-2">
                      {pendingCount}
                    </Badge>
                  )}
                </TabsTrigger>
              )}
            </TabsList>

            <TabsContent value="all-users" className="space-y-4">
              {/* Í≤ÄÏÉâ Î∞è ÌïÑÌÑ∞ */}
              <div className="flex items-center space-x-4">
                <Input
                  placeholder="Ïù¥Î¶Ñ, Ïù¥Î©îÏùº, ÌïôÍ∏âÏúºÎ°ú Í≤ÄÏÉâ..."
                  className="max-w-sm"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
                <Select value={roleFilter} onValueChange={setRoleFilter}>
                  <SelectTrigger className="w-40">
                    <SelectValue placeholder="Ïó≠Ìï†" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">Ï†ÑÏ≤¥</SelectItem>
                    <SelectItem value="admin">Í¥ÄÎ¶¨Ïûê</SelectItem>
                    <SelectItem value="homeroom">Îã¥ÏûÑÍµêÏÇ¨</SelectItem>
                    <SelectItem value="helper">ÎÖ∏Ìä∏Î∂Å Í¥ÄÎ¶¨ ÎèÑÏö∞ÎØ∏</SelectItem>
                    <SelectItem value="manager">Í¥ÄÎ¶¨ÌåÄ</SelectItem>
                    <SelectItem value="student">ÌïôÏÉù</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              {/* ÏÇ¨Ïö©Ïûê ÌÖåÏù¥Î∏î */}
              <div className="rounded-md border">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Ïù¥Î¶Ñ</TableHead>
                      <TableHead>Ïù¥Î©îÏùº</TableHead>
                      <TableHead>Ïó≠Ìï†</TableHead>
                      <TableHead>ÌïôÍ∏â</TableHead>
                      <TableHead>ÎåÄÏó¨ ÌòÑÌô©</TableHead>
                      <TableHead>Í∞ÄÏûÖÏùº</TableHead>
                      <TableHead>ÏûëÏóÖ</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {filteredUsers.length > 0 ? (
                      filteredUsers.map((user) => (
                        <TableRow key={user.id}>
                          <TableCell className="font-medium">
                            {user.name}
                            {user.isTeacher && (
                              <Badge variant="outline" className="ml-2">
                                ÍµêÏÇ¨
                              </Badge>
                            )}
                          </TableCell>
                          <TableCell>{user.email}</TableCell>
                          <TableCell>
                            <div className="flex items-center space-x-2">
                              {(currentUser.role === 'admin' || currentUser.role === 'manager') ? (
                                <Select
                                  value={user.role}
                                  onValueChange={(newRole) => {
                                    // Í∂åÌïú Ï≤¥ÌÅ¨: Í¥ÄÎ¶¨ÌåÄÏùÄ adminÏù¥ÎÇò manager Ïó≠Ìï†ÏùÑ ÏßÄÏ†ïÌï† Ïàò ÏóÜÏùå
                                    if (currentUser.role === 'manager' && (newRole === 'admin' || newRole === 'manager')) {
                                      alert('Í¥ÄÎ¶¨ÌåÄÏùÄ Í¥ÄÎ¶¨ÏûêÎÇò Í¥ÄÎ¶¨ÌåÄ Ïó≠Ìï†ÏùÑ ÏßÄÏ†ïÌï† Ïàò ÏóÜÏäµÎãàÎã§.')
                                      return
                                    }

                                    // Í¥ÄÎ¶¨Ïûê Ïó≠Ìï†ÏùÄ taylorr@gclass.ice.go.krÎßå ÏßÄÏ†ï Í∞ÄÎä•
                                    if (newRole === 'admin' && currentUser.email !== 'taylorr@gclass.ice.go.kr') {
                                      alert('Í¥ÄÎ¶¨Ïûê Ïó≠Ìï†ÏùÄ ÏµúÍ≥† Í¥ÄÎ¶¨ÏûêÎßå ÏßÄÏ†ïÌï† Ïàò ÏûàÏäµÎãàÎã§.')
                                      return
                                    }

                                    handleRoleChange(user.id, newRole)
                                  }}
                                >
                                  <SelectTrigger className="w-32">
                                    <SelectValue />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="student">ÌïôÏÉù</SelectItem>
                                    <SelectItem value="helper">ÎÖ∏Ìä∏Î∂Å Í¥ÄÎ¶¨ ÎèÑÏö∞ÎØ∏</SelectItem>
                                    <SelectItem value="homeroom">Îã¥ÏûÑÍµêÏÇ¨</SelectItem>
                                    {/* Í¥ÄÎ¶¨ÌåÄÏùÄ admin, manager Ïó≠Ìï† ÏÑ†ÌÉù Î∂àÍ∞Ä */}
                                    {currentUser.role === 'admin' && (
                                      <>
                                        <SelectItem value="manager">Í¥ÄÎ¶¨ÌåÄ</SelectItem>
                                        {currentUser.email === 'taylorr@gclass.ice.go.kr' && (
                                          <SelectItem value="admin">Í¥ÄÎ¶¨Ïûê</SelectItem>
                                        )}
                                      </>
                                    )}
                                  </SelectContent>
                                </Select>
                              ) : (
                                <Badge variant={user.role === 'admin' ? 'default' : 'secondary'}>
                                  {getRoleText(user.role)}
                                </Badge>
                              )}
                              {user.pendingApproval && user.requestedRole && (
                                <Badge variant="outline" className="text-orange-600">
                                  {getRoleText(user.requestedRole)} ÏäπÏù∏ ÎåÄÍ∏∞
                                </Badge>
                              )}
                            </div>
                          </TableCell>
                          <TableCell>{user.className || '-'}</TableCell>
                          <TableCell>
                            <div className="text-sm">
                              {user.currentLoan && (
                                <Badge variant="default" className="mb-1">
                                  ÎåÄÏó¨ Ï§ë: {user.currentLoan}
                                </Badge>
                              )}
                              {user.overdueCount > 0 && (
                                <Badge variant="destructive" className="mb-1">
                                  Ïó∞Ï≤¥ {user.overdueCount}Í±¥
                                </Badge>
                              )}
                              {user.loanHistory > 0 && (
                                <div className="text-xs text-muted-foreground">
                                  Ï¥ù {user.loanHistory}Ìöå ÎåÄÏó¨
                                </div>
                              )}
                            </div>
                          </TableCell>
                          <TableCell>{user.createdAt || '-'}</TableCell>
                          <TableCell>
                            <div className="flex items-center space-x-2">
                              {(currentUser.role === 'admin' || currentUser.role === 'manager' || currentUser.role === 'homeroom') && (
                                <Button
                                  variant="ghost"
                                  size="sm"
                                  onClick={() => {
                                    setSelectedUser(user)
                                    setShowUserLogsModal(true)
                                    // Always use email address for user logs API
                                    loadUserLogs(user.email)
                                  }}
                                  title="ÏÇ¨Ïö©Ïûê Î°úÍ∑∏ Î≥¥Í∏∞"
                                >
                                  <svg className="h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                  </svg>
                                </Button>
                              )}
                              {user.pendingApproval && (currentUser.role === 'admin' || currentUser.role === 'manager' ||
                                (currentUser.role === 'homeroom' && user.className === `${currentUser.grade}-${currentUser.class}`)) && (
                                <div className="flex space-x-1">
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => handleApprovalAction(user.id, 'approve')}
                                    className="text-green-600 hover:text-green-700"
                                  >
                                    ÏäπÏù∏
                                  </Button>
                                  <Button
                                    variant="outline"
                                    size="sm"
                                    onClick={() => handleApprovalAction(user.id, 'reject')}
                                    className="text-red-600 hover:text-red-700"
                                  >
                                    Í±∞Ï†à
                                  </Button>
                                </div>
                              )}
                            </div>
                          </TableCell>
                        </TableRow>
                      ))
                    ) : (
                      <TableRow>
                        <TableCell colSpan={7} className="text-center py-8 text-muted-foreground">
                          {users.length === 0 ? 'Îì±Î°ùÎêú ÏÇ¨Ïö©ÏûêÍ∞Ä ÏóÜÏäµÎãàÎã§.' : 'Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.'}
                        </TableCell>
                      </TableRow>
                    )}
                  </TableBody>
                </Table>
              </div>
            </TabsContent>

            <TabsContent value="pending-approvals" className="space-y-4">
              {/* ÏäπÏù∏ ÎåÄÍ∏∞ ÏÇ¨Ïö©Ïûê Î™©Î°ù */}
              <div className="rounded-md border">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Ïù¥Î¶Ñ</TableHead>
                      <TableHead>Ïù¥Î©îÏùº</TableHead>
                      <TableHead>ÏöîÏ≤≠ Ïó≠Ìï†</TableHead>
                      <TableHead>Ïã†Ï≤≠ ÌïôÍ∏â</TableHead>
                      <TableHead>Ïã†Ï≤≠Ïùº</TableHead>
                      <TableHead>ÏûëÏóÖ</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {pendingApprovals.length > 0 ? (
                      pendingApprovals.map((user) => (
                        <TableRow key={user.id}>
                          <TableCell className="font-medium">{user.name}</TableCell>
                          <TableCell>{user.email}</TableCell>
                          <TableCell>
                            <Badge variant="outline" className="text-orange-600">
                              {getRoleText(user.requested_role)}
                            </Badge>
                          </TableCell>
                          <TableCell>
                            {user.class_info?.grade && user.class_info?.class
                              ? `${user.class_info.grade}-${user.class_info.class}`
                              : '-'}
                          </TableCell>
                          <TableCell>
                            {user.requested_at
                              ? new Date(user.requested_at).toLocaleDateString('ko-KR')
                              : '-'}
                          </TableCell>
                          <TableCell>
                            <div className="flex space-x-2">
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => handleApprovalAction(user.id, 'approve')}
                                className="text-green-600 hover:text-green-700"
                              >
                                ÏäπÏù∏
                              </Button>
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => handleApprovalAction(user.id, 'reject')}
                                className="text-red-600 hover:text-red-700"
                              >
                                Í±∞Ï†à
                              </Button>
                            </div>
                          </TableCell>
                        </TableRow>
                      ))
                    ) : (
                      <TableRow>
                        <TableCell colSpan={6} className="text-center py-8 text-muted-foreground">
                          ÏäπÏù∏ ÎåÄÍ∏∞ Ï§ëÏù∏ ÏÇ¨Ïö©ÏûêÍ∞Ä ÏóÜÏäµÎãàÎã§.
                        </TableCell>
                      </TableRow>
                    )}
                  </TableBody>
                </Table>
              </div>
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>

      {/* Ïó≠Ìï† Î≥ÄÍ≤Ω Î™®Îã¨ */}
      <Dialog open={showRoleModal} onOpenChange={setShowRoleModal}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>ÏÇ¨Ïö©Ïûê Í∂åÌïú Î≥ÄÍ≤Ω</DialogTitle>
            <DialogDescription>
              {selectedUser?.name}ÎãòÏùò Í∂åÌïúÏùÑ Î≥ÄÍ≤ΩÌï©ÎãàÎã§.
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4">
            <div>
              <label className="text-sm font-medium">ÌòÑÏû¨ Í∂åÌïú</label>
              <p className="text-sm text-muted-foreground">
                {selectedUser && getRoleText(selectedUser.role)}
              </p>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium">ÏÉà Í∂åÌïú</label>
              <div className="grid grid-cols-1 gap-2">
                {(() => {
                  const availableRoles = ['student', 'helper', 'homeroom']
                  // adminÎßå manager Ïó≠Ìï† Î∂ÄÏó¨ Í∞ÄÎä•
                  if (currentUser.role === 'admin') {
                    availableRoles.push('manager')
                  }
                  // taylorr@gclass.ice.go.krÎßå admin Ïó≠Ìï† Î∂ÄÏó¨ Í∞ÄÎä•
                  if (currentUser.email === 'taylorr@gclass.ice.go.kr') {
                    availableRoles.push('admin')
                  }
                  return availableRoles
                })().map((role) => (
                  <Button
                    key={role}
                    variant={selectedUser?.role === role ? "default" : "outline"}
                    className="justify-start"
                    onClick={() => handleRoleChange(selectedUser?.id || '', role)}
                  >
                    {getRoleText(role)}
                  </Button>
                ))}
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* ÏÇ¨Ïö©Ïûê Î°úÍ∑∏ Î™®Îã¨ */}
      <Dialog open={showUserLogsModal} onOpenChange={setShowUserLogsModal}>
        <DialogContent className="max-w-4xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>ÏÇ¨Ïö©Ïûê ÌôúÎèô Î°úÍ∑∏</DialogTitle>
            <DialogDescription>
              {selectedUser?.name}ÎãòÏùò ÌôúÎèô Í∏∞Î°ùÏûÖÎãàÎã§.
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-4">
            {logsLoading ? (
              <div className="text-center py-8">
                <div className="text-muted-foreground">Î°úÍ∑∏Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</div>
              </div>
            ) : userLogs.length > 0 ? (
              <div className="space-y-3">
                {userLogs.map((log, index) => {
                  // Ïï°ÏÖòÎ≥Ñ Ïä§ÌÉÄÏùº Î∞è ÏïÑÏù¥ÏΩò Ï†ïÏùò
                  const getLogStyle = (action: string) => {
                    switch (action) {
                      case 'ÎåÄÏó¨ Ïã†Ï≤≠':
                        return {
                          bgColor: 'bg-blue-50 border-blue-200',
                          textColor: 'text-blue-700',
                          badgeColor: 'bg-blue-100 text-blue-800',
                          icon: 'üìù'
                        }
                      case 'ÎåÄÏó¨ ÏäπÏù∏':
                      case 'ÎåÄÏó¨ ÏäπÏù∏Îê®':
                        return {
                          bgColor: 'bg-green-50 border-green-200',
                          textColor: 'text-green-700',
                          badgeColor: 'bg-green-100 text-green-800',
                          icon: '‚úÖ'
                        }
                      case 'ÎåÄÏó¨ ÏäπÏù∏ ÏûëÏóÖ':
                        return {
                          bgColor: 'bg-emerald-50 border-emerald-200',
                          textColor: 'text-emerald-700',
                          badgeColor: 'bg-emerald-100 text-emerald-800',
                          icon: '‚úÖ'
                        }
                      case 'Í∏∞Í∏∞ ÏàòÎ†π':
                        return {
                          bgColor: 'bg-purple-50 border-purple-200',
                          textColor: 'text-purple-700',
                          badgeColor: 'bg-purple-100 text-purple-800',
                          icon: 'üì±'
                        }
                      case 'Í∏∞Í∏∞ Î∞òÎÇ©':
                        return {
                          bgColor: 'bg-gray-50 border-gray-200',
                          textColor: 'text-gray-700',
                          badgeColor: 'bg-gray-100 text-gray-800',
                          icon: '‚Ü©Ô∏è'
                        }
                      case 'Î∞òÎÇ© Ï≤òÎ¶¨ ÏûëÏóÖ':
                        return {
                          bgColor: 'bg-slate-50 border-slate-200',
                          textColor: 'text-slate-700',
                          badgeColor: 'bg-slate-100 text-slate-800',
                          icon: 'üì¶'
                        }
                      case 'ÎåÄÏó¨ Ï∑®ÏÜå (Î≥∏Ïù∏)':
                        return {
                          bgColor: 'bg-orange-50 border-orange-200',
                          textColor: 'text-orange-700',
                          badgeColor: 'bg-orange-100 text-orange-800',
                          icon: 'üö´'
                        }
                      case 'ÎåÄÏó¨ Í±∞Ï†à':
                      case 'ÎåÄÏó¨ Í±∞Ï†àÎê®':
                        return {
                          bgColor: 'bg-red-50 border-red-200',
                          textColor: 'text-red-700',
                          badgeColor: 'bg-red-100 text-red-800',
                          icon: '‚ùå'
                        }
                      case 'ÎåÄÏó¨ Í±∞Ï†à ÏûëÏóÖ':
                        return {
                          bgColor: 'bg-rose-50 border-rose-200',
                          textColor: 'text-rose-700',
                          badgeColor: 'bg-rose-100 text-rose-800',
                          icon: '‚ùå'
                        }
                      case 'ÎåÄÏó¨ Ï∑®ÏÜå':
                        return {
                          bgColor: 'bg-orange-50 border-orange-200',
                          textColor: 'text-orange-700',
                          badgeColor: 'bg-orange-100 text-orange-800',
                          icon: 'üö´'
                        }
                      case 'Í≥ÑÏ†ï ÏÉùÏÑ±':
                        return {
                          bgColor: 'bg-yellow-50 border-yellow-200',
                          textColor: 'text-yellow-700',
                          badgeColor: 'bg-yellow-100 text-yellow-800',
                          icon: 'üë§'
                        }
                      default:
                        return {
                          bgColor: 'bg-gray-50 border-gray-200',
                          textColor: 'text-gray-700',
                          badgeColor: 'bg-gray-100 text-gray-800',
                          icon: 'üìÑ'
                        }
                    }
                  }

                  const style = getLogStyle(log.action)

                  return (
                    <div key={index} className={`border rounded-lg p-4 ${style.bgColor} hover:shadow-sm transition-shadow`}>
                      <div className="flex justify-between items-start gap-4">
                        <div className="space-y-2 flex-1">
                          <div className="flex items-center gap-3">
                            <span className="text-xl">{style.icon}</span>
                            <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${style.badgeColor}`}>
                              {log.action}
                            </span>
                          </div>
                          <div className={`text-sm ${style.textColor} ml-8 leading-relaxed`}>
                            {log.details}
                          </div>
                        </div>
                        <div className={`text-sm ${style.textColor} opacity-75 whitespace-nowrap`}>
                          {new Date(log.timestamp).toLocaleString('ko-KR', {
                            year: 'numeric',
                            month: 'short',
                            day: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit'
                          })}
                        </div>
                      </div>
                      {log.metadata && (
                        <div className="text-xs bg-white bg-opacity-50 p-3 rounded mt-3 ml-8">
                          <pre className="whitespace-pre-wrap text-gray-600">
                            {JSON.stringify(log.metadata, null, 2)}
                          </pre>
                        </div>
                      )}
                    </div>
                  )
                })}
              </div>
            ) : (
              <div className="text-center py-8 text-muted-foreground">
                ÌôúÎèô Í∏∞Î°ùÏù¥ ÏóÜÏäµÎãàÎã§.
              </div>
            )}
          </div>
        </DialogContent>
      </Dialog>
    </>
  )
}