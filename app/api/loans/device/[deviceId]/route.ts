import { createAdminClient } from '@/lib/supabase-server'
import { getCurrentUser } from '@/lib/auth'
import { NextResponse } from 'next/server'

export const dynamic = 'force-dynamic'

export async function GET(
  request: Request,
  { params }: { params: { deviceId: string } }
) {
  try {
    const adminSupabase = createAdminClient()

    // getCurrentUser Ìï®ÏàòÎ•º ÏÇ¨Ïö©Ìï¥ÏÑú Ï†úÎåÄÎ°ú Ï≤òÎ¶¨Îêú ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
    const user = await getCurrentUser()

    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Í¥ÄÎ¶¨Ïûê, Îã¥ÏûÑÍµêÏÇ¨, ÎÖ∏Ìä∏Î∂Å Í¥ÄÎ¶¨ ÎèÑÏö∞ÎØ∏Îßå Ï†ëÍ∑º Í∞ÄÎä•
    if (!['admin', 'homeroom', 'helper'].includes(user.role)) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { deviceId } = params
    const deviceHistory: any[] = []

    console.log('üîç DEVICE HISTORY - Fetching history for device:', deviceId)
    console.log('üîç DEVICE HISTORY - Current user:', user.email, 'Role:', user.role)

    // Í∏∞Í∏∞ Î≤àÌò∏ÏóêÏÑú ÌïôÎÖÑÍ≥º Î∞ò Ï∂îÏ∂ú (Ïòà: ICH-20111 -> 2ÌïôÎÖÑ 1Î∞ò)
    let deviceGrade: number | null = null
    let deviceClass: number | null = null
    const deviceMatch = deviceId.match(/ICH-(\d)(\d{2})(\d{2})/)
    if (deviceMatch) {
      deviceGrade = parseInt(deviceMatch[1])
      deviceClass = parseInt(deviceMatch[2])
      console.log('üîç DEVICE HISTORY - Device parsed:', { deviceGrade, deviceClass, match: deviceMatch })
    }

    // Îã¥ÏûÑÍµêÏÇ¨ÎÇò ÎèÑÏö∞ÎØ∏Ïù∏ Í≤ΩÏö∞ ÏûêÏã†Ïùò Î∞ò Í∏∞Í∏∞Îßå Ï†ëÍ∑º Í∞ÄÎä• (Í¥ÄÎ¶¨ÏûêÎäî Ï†úÏô∏)
    if (user.role !== 'admin' && (user.role === 'homeroom' || user.role === 'helper')) {
      console.log('üîç DEVICE HISTORY - User info:', { grade: user.grade, class: user.class, isApprovedHomeroom: user.isApprovedHomeroom })

      if (user.grade && user.class) {
        const userGrade = parseInt(user.grade)
        const userClass = parseInt(user.class)

        console.log('üîç DEVICE HISTORY - User class info:', { userGrade, userClass })
        console.log('üîç DEVICE HISTORY - Comparing:', { deviceGrade, deviceClass, userGrade, userClass })

        // Îã¥ÏûÑÍµêÏÇ¨Îäî ÏäπÏù∏Îêú Í≤ΩÏö∞Îßå Ï†ëÍ∑º Í∞ÄÎä•
        if (user.role === 'homeroom' && !user.isApprovedHomeroom) {
          console.log('üîç DEVICE HISTORY - Homeroom not approved')
          return NextResponse.json({ error: 'Unauthorized - Homeroom approval required' }, { status: 401 })
        }

        // Ìï¥Îãπ Í∏∞Í∏∞Í∞Ä ÏûêÏã†Ïùò Î∞ò Í∏∞Í∏∞Ïù∏ÏßÄ ÌôïÏù∏
        if (deviceGrade !== userGrade || deviceClass !== userClass) {
          console.log('üîç DEVICE HISTORY - Class mismatch:', { deviceGrade, deviceClass, userGrade, userClass })
          return NextResponse.json({ error: 'Unauthorized - Class mismatch' }, { status: 401 })
        }
      } else {
        console.log('üîç DEVICE HISTORY - No class information:', { grade: user.grade, class: user.class })
        return NextResponse.json({ error: 'Unauthorized - No class information' }, { status: 401 })
      }
    }

    // Î≥ÄÏàòÎì§ÏùÑ Î®ºÏ†Ä ÏÑ†Ïñ∏
    let allLoans: any[] = []
    let sampleTags: any[] = []
    let deviceNumber = ''
    let shortTag = ''

    try {
      // Î®ºÏ†Ä Ï†ÑÏ≤¥ ÎåÄÏó¨ Í∏∞Î°ùÏóêÏÑú device_tag Ìå®ÌÑ¥ ÌôïÏù∏
      const { data: loansData } = await adminSupabase
        .from('loans')
        .select('device_tag, student_name, created_at')
        .not('device_tag', 'is', null)
        .limit(50)

      allLoans = loansData || []

      // ÏùëÎãµÏóê ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Ìè¨Ìï®
      sampleTags = allLoans.map(l => ({
        device_tag: l.device_tag,
        student: l.student_name,
        date: l.created_at?.substring(0, 10)
      })).slice(0, 15)

      // ICH-30135ÏóêÏÑú Îã§ÏñëÌïú Ìå®ÌÑ¥ÏúºÎ°ú Îß§Ïπ≠ ÏãúÎèÑ
      deviceNumber = deviceId.replace('ICH-', '') // 30135
      const grade = deviceNumber.charAt(0) // 3
      const classNum = deviceNumber.substring(1, 3) // 01
      const deviceNum = deviceNumber.substring(3) // 35
      shortTag = `${grade}-${parseInt(classNum)}-${parseInt(deviceNum)}` // 3-1-35

      console.log('üîç DEVICE HISTORY - Device parsing:', {
        deviceId,
        deviceNumber,
        grade,
        classNum: parseInt(classNum),
        deviceNum: parseInt(deviceNum),
        shortTag
      })

      // Îã§ÏñëÌïú Ìå®ÌÑ¥ÏúºÎ°ú Ï°∞Ìöå
      const { data: loans, error: loansError } = await adminSupabase
        .from('loans')
        .select('*')
        .or(`device_tag.eq.${deviceId},device_tag.eq.${shortTag},device_tag.like.%${shortTag}%,device_tag.like.%${deviceNumber}%`)
        .order('created_at', { ascending: false })

      console.log('üîç DEVICE HISTORY - Loans query result:', {
        deviceId,
        shortTag,
        count: loans?.length || 0,
        error: loansError,
        foundTags: loans?.map(l => l.device_tag).slice(0, 5)
      })

      if (loans) {
        loans.forEach(loan => {
          // ÎåÄÏó¨ Ïã†Ï≤≠
          deviceHistory.push({
            timestamp: loan.created_at,
            action: 'ÎåÄÏó¨ Ïã†Ï≤≠',
            details: `${loan.student_name || 'Ïïå Ïàò ÏóÜÏùå'}Ïù¥ Í∏∞Í∏∞Î•º Ïã†Ï≤≠ÌñàÏäµÎãàÎã§.`,
            metadata: {
              student_name: loan.student_name,
              class_name: loan.class_name,
              purpose: loan.purpose,
              status: loan.status
            }
          })

          // ÏäπÏù∏
          if (loan.approved_at) {
            deviceHistory.push({
              timestamp: loan.approved_at,
              action: 'ÎåÄÏó¨ ÏäπÏù∏',
              details: `ÎåÄÏó¨ Ïã†Ï≤≠Ïù¥ ÏäπÏù∏ÎêòÏóàÏäµÎãàÎã§. (ÏäπÏù∏Ïûê: ${loan.approved_by || 'Ïïå Ïàò ÏóÜÏùå'})`,
              metadata: {
                approved_by: loan.approved_by,
                student_name: loan.student_name
              }
            })
          }

          // ÏàòÎ†π
          if (loan.picked_up_at) {
            deviceHistory.push({
              timestamp: loan.picked_up_at,
              action: 'Í∏∞Í∏∞ ÏàòÎ†π',
              details: `${loan.student_name || 'Ïïå Ïàò ÏóÜÏùå'}Ïù¥ Í∏∞Í∏∞Î•º ÏàòÎ†πÌñàÏäµÎãàÎã§.`,
              metadata: {
                student_name: loan.student_name,
                class_name: loan.class_name
              }
            })
          }

          // Î∞òÎÇ©
          if (loan.returned_at) {
            deviceHistory.push({
              timestamp: loan.returned_at,
              action: 'Í∏∞Í∏∞ Î∞òÎÇ©',
              details: `${loan.student_name || 'Ïïå Ïàò ÏóÜÏùå'}Ïù¥ Í∏∞Í∏∞Î•º Î∞òÎÇ©ÌñàÏäµÎãàÎã§.`,
              metadata: {
                student_name: loan.student_name,
                return_condition: loan.return_condition,
                receiver_name: loan.receiver_name
              }
            })
          }

          // Í±∞Ï†à
          if (loan.status === 'rejected') {
            deviceHistory.push({
              timestamp: loan.updated_at || loan.created_at,
              action: 'ÎåÄÏó¨ Í±∞Ï†à',
              details: `ÎåÄÏó¨ Ïã†Ï≤≠Ïù¥ Í±∞Ï†àÎêòÏóàÏäµÎãàÎã§.`,
              metadata: {
                student_name: loan.student_name,
                notes: loan.notes
              }
            })
          }
        })
      }

    } catch (error) {
      console.error('Error fetching device history:', error)
    }

    // ÏãúÍ∞ÑÏàúÏúºÎ°ú Ï†ïÎ†¨ (ÏµúÏã†Ïàú)
    deviceHistory.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())

    console.log('üîç DEVICE HISTORY - Total history entries:', deviceHistory.length)

    return NextResponse.json({
      deviceId,
      history: deviceHistory,
      debug: {
        sampleTags,
        queriedPatterns: {
          deviceId,
          shortTag,
          deviceNumber
        },
        totalLoansInDB: allLoans.length
      }
    })

  } catch (error) {
    console.error('Device history API error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}